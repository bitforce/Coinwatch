#!/usr/local/bin/python2
# -*- coding: utf-8 -*-

from coinwrap import Market

from core.operations import *
from aux.generic import *

import argparse
import datetime
import math
import time
import csv
import sys


# =============================================================================
# global variables
# =============================================================================
args = None


# =============================================================================
# assist functions
# =============================================================================
def define_commandline_arguments():  # EVENTUALLY UPDATE TO ADD SUBPARSERS AND POS ARGS
    parser = argparse.ArgumentParser(prog='cryptocast')
    parser.add_argument('--run',
                        help='runs watch daemon',
                        action='store_true')
    # config
    # ------
    parser.add_argument('--set-path',
                        help='sets the watchlists\' location path')
    parser.add_argument('--get-path',
                        help='sets the watchlists\' location path',
                        action='store_true')
    # common args
    # -----------
    parser.add_argument('-d', '--delay',
                        help='delay of http request; in seconds',
                        default=60,
                        type=long)
    parser.add_argument('-c', '--cycles',
                        help='total number of http requests',
                        default=100,
                        type=long)
    parser.add_argument('-a', '--add',
                        help='add cryptos to watchlist',
                        nargs='+')
    parser.add_argument('-r', '--remove',
                        help='remove cryptos from watchlist',
                        nargs='+')
    # rare args
    # ---------
    parser.add_argument('--add-exchanges',
                        help='add exchanges that host your cryptos',
                        nargs='+')
    parser.add_argument('--remove-exchanges',
                        help='remove exchanges that host your cryptos',
                        nargs='+')
    parser.add_argument('-w', '--wipe',
                        help='wipe watchlist.txt clean',
                        action='store_true')
    parser.add_argument('--wipe-csv',
                        help='wipe watchlist.csv clean',
                        action='store_true')
    # display local data
    # ------------------
    parser.add_argument('--watchlist',
                        help='prints watchlist.txt contents',
                        action='store_true')
    # display numerical data
    # ----------------------
    parser.add_argument('--low',
                        help='returns lowest price--use ticker symbol',
                        nargs='+')
    parser.add_argument('--high',
                        help='returns lowest price--use ticker symbol',
                        nargs='+')
    parser.add_argument('--standard-deviation',
                        help='shows asset\'s standard deviation',
                        nargs='+')
    parser.add_argument('--percent-changes',
                        help='shows assets\'s percent change over custom period',
                        nargs='+')
    parser.add_argument('--simple-percent-changes',
                        help='shows assets\'s percent change over 1H, 24H, 7D',
                        nargs='+')
    return parser


def file_exists(f, msg):
    if not os.path.isfile(f):
        print_bold(msg)
        open(f, 'w').close()


def dir_exists(d, msg):  # doesn't need to exist, but I do it for clean-code style
    if not os.path.isdir(d):
        print_bold(msg)
        os.makedirs(d)


def show(*options):
    if len(options) == 2 and options[0] == 'low':
        for arg in options[1]:
            arg = arg.upper()
            if low(arg) < 0:
                print_fail(arg + ' : no pricing data to be read')
                continue
            print arg + ' : ' + str(low(arg))
    elif len(options) == 2 and options[0] == 'high':
        for arg in args.high:
            arg = arg.upper()
            if high(arg) < 0:
                print_fail(arg + ' : no pricing data to be read')
                continue
            print arg + ' : ' + str(high(arg))
    elif len(options) == 2 and options[0] == 'delta':
        for dev in args.show_stddev:
            if stddev(dev) != 0:
                print str(get_standard_deviation(dev))
    else:
        for item in open(options[0]):
            print item,


# =============================================================================
# main functions
# =============================================================================
def validate_environment():
    dir_exists('.watch', 'no watch directory found; creating one now')
    file_exists(watchlist, 'no watchlist.txt found; creating one now')
    file_exists(watchdata, 'no watchlist.csv found; creating one now')
    file_exists(exchanges, 'no exchanges.txt found, creating one now')
    global args
    args = define_commandline_arguments()
    if len(sys.argv) == 1:
        args.print_help()
        sys.exit()
    if not fetch_watchlist():
        print_warn('no cryptos in watchlist')
        sys.exit()
    args = args.parse_args()
    if not args.run:
        sys.exit()


def parse_logic():
    # config
    # ------
    if args.set_path:
        set_path(args.set_path)
    if args.get_path:
        show_path()
    # common args
    # -----------
    if args.remove:
        for arg in args.remove:
            remove_crypto(arg)
    if args.add:
        for arg in args.add:
            add_crypto(arg)
    if args.remove_exchange:
        for arg in args.remove_exchange:
            remove_exchange(arg)
    if args.add_exchange:
        for arg in args.add_exchange:
            add_exchange(arg)
    # rare args
    # ---------
    if args.wipe:
        print_warn('wiping watchlist.txt contents')
        open(watchlist, 'w').close()
    if args.wipe_csv:
        print_warn('wiping watchlist.csv contents')
        open(watchdata, 'w').close()
    # display local data
    # ------------------
    if args.show_watchlist:
        show_watchlist()
    # display numerical data
    # ----------------------
    if args.low:
        show_low(args.low)
    if args.high:
        show_high(args.high)
    if args.show_standard_deviation:
        show_delta(args.show_standard_deviationh)
    if args.simple_percent_changes:
        for arg in args.simple_percent_changes:
            if verified_coin(arg):
                show_percent_changes(arg)


def update():
    f = open(watchdata, 'a')
    date = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    for crypto in fetch_watchlist():
        price = float(Market().coin(crypto)[0]['price_usd'])  # * unicode bug
        symbol = str(Market().coin(crypto)[0]['symbol'])  # * unicode bug
        csv.writer(f).writerow([date, price, symbol])
        if price < sell(symbol, price):
            print_fail(symbol + ' $' + str(price))
        elif price > buy(symbol, price):
            print_pass(symbol + ' $' + str(price))
        else:
            print symbol + ' $' + str(price)
    f.write('\n')
    f.close()
    # maybe this can be optimized so you don't have to open the file every update


def init():
    cycles = args.cycles
    while cycles > 0:
        cycles -= 1
        print 'CYCLE ' + str((cycles - args.cycles) * -1)
        print '-----'
        update()
        print '\n...\n'
        time.sleep(args.delay)


def run():
    validate_environment()
    parse_logic()
    backfill()  # should automatically check for missed dates
    init()


# =============================================================================
run()
