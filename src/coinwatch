#!/usr/bin/env python
# -*- coding: utf-8 -*-

from core.commandline_operations import *
from core.critical_operations import backfill
from core.final_strategy import update
from aux.tracker import track
from aux.generic import *

from multiprocessing import Process

import argparse
import datetime
import time
import csv
import sys


# =============================================================================
# global variables
# =============================================================================
start = None
args = None


# =============================================================================
# assist functions
# =============================================================================
def define_commandline_arguments():
    parser = argparse.ArgumentParser('cryptocast')
    # subparser = parser.add_subparsers()
    parser.add_argument('--start',
                        help='runs watch daemon',
                        action='store_true')
    # config
    # ------
    parser.add_argument('--set-path',
                        help='sets the watchlists\' location path')
    parser.add_argument('--get-path',
                        help='sets the watchlists\' location path',
                        action='store_true')
    # common args
    # -----------
    parser.add_argument('-d', '--delay',
                        help='delay of http request; in seconds',
                        default=60,
                        type=long)
    parser.add_argument('-c', '--cycles',
                        help='total number of http requests',
                        default=100,
                        type=long)
    parser.add_argument('-a', '--add',
                        help='add cryptos to watchlist',
                        nargs='+')
    parser.add_argument('-r', '--remove',
                        help='remove cryptos from watchlist',
                        nargs='+')
    # rare args
    # ---------
    parser.add_argument('-w', '--wipe',
                        help='wipe watchlist.txt clean',
                        action='store_true')
    parser.add_argument('--wipe-csv',
                        help='wipe watchlist.csv clean',
                        action='store_true')
    parser.add_argument('--wipe-exchanges',
                        help='wipe exchanges.txt clean',
                        action='store_true')
    parser.add_argument('--add-exchanges',
                        help='add exchanges that host your cryptos',
                        nargs='+')
    parser.add_argument('--remove-exchanges',
                        help='remove exchanges that host your cryptos',
                        nargs='+')
    parser.add_argument('--available-exchanges',
                        help='prints all available exchanges to trade cryptos',
                        action='store_true')
    # display local data
    # ------------------
    parser.add_argument('--exchanges',
                        help='prints exchanges.txt contents',
                        action='store_true')
    parser.add_argument('--watchlist',
                        help='prints watchlist.txt contents',
                        action='store_true')

    # display numerical data
    # ----------------------
    parser.add_argument('--low',
                        help='returns lowest price--use ticker symbol',
                        nargs='+')
    parser.add_argument('--high',
                        help='returns lowest price--use ticker symbol',
                        nargs='+')
    parser.add_argument('--standard-deviation',
                        help='shows asset\'s standard deviation',
                        nargs='+')
    parser.add_argument('--percent-change',
                        help='shows assets\'s percent change over custom period',
                        nargs='+')
    parser.add_argument('--simple-percent-changes',
                        help='shows assets\'s percent change over 1H, 24H, 7D',
                        nargs='+')
    return parser


def file_exists(f, msg):
    if not os.path.isfile(f):
        print_bold(msg)
        open(f, 'w').close()


def dir_exists(d, msg):
    if not os.path.isdir(d):
        print_bold(msg)
        os.makedirs(d)


# =============================================================================
# main functions
# =============================================================================
def validate_environment():
    dir_exists('out', 'no output directory found; creating one now')
    file_exists(watchlist, 'no watchlist.txt found; creating one now')
    file_exists(watchdata, 'no watchlist.csv found; creating one now')
    file_exists(exchanges, 'no exchanges.txt found, creating one now')


def parse_logic():
    global args
    args = define_commandline_arguments()
    if len(sys.argv) == 1:
        args.print_help()
        sys.exit()
    args = args.parse_args()
    global start
    start = args.start
    # config
    # ------
    if args.set_path:
        set_path(args.set_path)
    if args.get_path:
        print get_path()
    # common args
    # -----------
    if args.remove:
        for arg in args.remove:
            remove_crypto(arg)
    if args.add:
        for arg in args.add:
            add_crypto(arg)
    # rare args
    # ---------
    if args.wipe:
        print_warn('wiping watchlist.txt contents')
        open(watchlist, 'w').close()
    if args.wipe_csv:
        print_warn('wiping watchlist.csv contents')
        open(watchdata, 'w').close()
    if args.wipe_exchanges:
        print_warn('wiping exchanges.txt contents')
        open(exchanges, 'w').close()
    if args.remove_exchanges:
        for arg in args.remove_exchanges:
            remove_exchange(arg)
    if args.add_exchanges:
        for arg in args.add_exchanges:
            add_exchange(arg)
    if args.available_exchanges:
        for exchange in extract_all_exchanges():
            print exchange
    # display local data
    # ------------------
    if args.exchanges:
        for name in open(exchanges):
            print name,
    if args.watchlist:
        for name in open(watchlist):
            print name,
    # display numerical data
    # ----------------------
    if args.low:
        for arg in args.low:
            arg = arg.upper()
            if get_low(arg) < 0:
                print_fail(arg + ' : no pricing data to be read')
                continue
            print arg + ' : ' + str(get_low(arg))
    if args.high:
        for arg in args.high:
            arg = arg.upper()
            if get_high(arg) < 0:
                print_fail(arg + ' : no pricing data to be read')
                continue
            print arg + ' : ' + str(get_high(arg))
    # FIX THIS
    if args.standard_deviation:
        for arg in args.standard_deviation:
            if not verified_coin(arg):  # WHY?
                return
            print get_standard_deviation(arg)
    if args.simple_percent_changes:
        for arg in args.simple_percent_changes:
            if not verified_coin(arg):
                return
            count = 0
            print arg.upper()
            for coin in get_simple_percent_changes(arg):
                c = str(coin) + '%'
                if count == 0:
                    print '{:5}'.format('1H = ') + c
                elif count == 1:
                    print '{:5}'.format('1D = ') + c
                elif count == 2:
                    print '{:5}'.format('1W = ') + c
                count += 1
            print


def start():
    backfill()
    if not start:
        sys.exit()
    if not fetch_watchlist():
        print_warn('no cryptos in watchlist')
        sys.exit()
    cycles = args.cycles
    while cycles > 0:
        cycles -= 1
        print 'CYCLE ' + str((cycles - args.cycles) * -1)
        print '-----'
        update()
        print '\n...\n'
        time.sleep(args.delay)


def init():
    p1 = Process(target=start)
    p2 = Process(target=track)
    p1.start()
    p2.start()
    p1.join()
    p2.join()



def run():
    validate_environment()
    parse_logic()
    init()


# =============================================================================
run()
