TODO
---
INSTALL FILE SHOULD INSTALL `cryptocast` AND THEN BIN/\* AS IS OR AS AN EGG -> PYC = SCRAMBLED
create a _.coinwatch.conf_ file if it doesn't exist and be able to set permanent configs
via commands like this: ./script.py -c 10000 -d 45 --preset
the program should attempt to read from the config file first if preset commands aren't 
in place

create time intervals for mean() and stddev() calculator: make it so that you can put 
any time period in place (10m, 1h, 3d , 2w, 1M, 5Y) <- 1m is finest granularity, and 
use low market caps for high volatility gains, something with a $B+ market cap will 
only move up slowly compared to others

find way perform a --backup

let's do normal run is relative mean/avg of accrued pricing data since scrape, and the
--last option says how much price/percent went up since last look/scrape

*find a separate source for current currency volume tracking in real-time, compare it to the 
past daily volume from CMC and then see if it is close to days of high volumes, if so, what 
was the spread in % of gains/losses for that day --> so you know how to invest; get avg highs
and lows for volume with relative time index; use this to set thresholds for when a currency 
is about to experience a big [p/d]ump --> will likely have to pull from ccxt exchanges*
 
use beautiful soup and scrape coinmarketcap for data, you'll need to dynamically
change the preset, but the normal for
https://coinmarketcap.com/currencies/COINNAME/historical-data/
is 30 days

if you get all-time data, you can then use it to find out ICO date and choose
any interval you want

you can even create loading bar by finding out how many elements are on the page and
then counting them as you scrape

import all the data you are trying to backfill into backfill.csv since watchdata.csv is
a relevant historical tracker

**UPDATE**
> scrape top 200 coins from cmc and sort them yourself, repeat the scrape based on intervals 
> provided by the user and track which one's fall and stay consistently within the top 100
> append the #markets id to the url to find out if the coins traversing the ranks are 
> on exchanges you use


cryptocast
----------
 The main file where the argparse methods are located. Sure you can separate 
the arguments in their own file (arguments.py) to make code cleaner. Within 
this file, keep: 
    validate(), update(); 
as these have strong relevance to he main file's functionality and ties 
things together well.
